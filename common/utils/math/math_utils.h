// Copyright @2018 Pony AI Inc. All rights reserved.

#pragma once

#include <algorithm>
#include <cmath>
#include <functional>
#include <vector>

#include "common/utils/math/vec2d.h"
#include "common/utils/math/vec3d.h"
#include "glog/logging.h"

#define M_PI_f 3.14159265358979323846f
#define M_PI_2_f 1.57079632679489661923f

namespace math {
namespace internal {
constexpr int kLog2Modular = 67;
constexpr int kLog2ModularTable[kLog2Modular] = {
    -1, 0,  1,  39, 2,  15, 40, 23, 3,  12, 16, 59, 41, 19, 24, 54, 4,  -1, 13, 10, 17, 62, 60,
    28, 42, 30, 20, 51, 25, 44, 55, 47, 5,  32, -1, 38, 14, 22, 11, 58, 18, 53, 63, 9,  61, 27,
    29, 50, 43, 46, 31, 37, 21, 57, 52, 8,  26, 49, 45, 36, 56, 7,  48, 35, 6,  34, 33};

inline int Log2ByTableLookup(uint64_t n) {
  return internal::kLog2ModularTable[n % internal::kLog2Modular];
}

constexpr int kApproxIntervals = 100;
constexpr int kApproxTableSize = 3 * (kApproxIntervals * 2 + 1);
constexpr double kAtanTable[kApproxTableSize] = {
    -7.8539816340e-01, 4.9999583355e-03,  -2.5124995272e-05, -7.8037308007e-01, 5.0502083453e-03,
    -2.5374909161e-05, -7.7529749681e-01, 5.1009582031e-03,  -2.5624588671e-05, -7.7017091402e-01,
    5.1522074411e-03,  -2.5873868317e-05, -7.6499283271e-01, 5.2039552606e-03,  -2.6122574559e-05,
    -7.5976275488e-01, 5.2562005158e-03,  -2.6370525570e-05, -7.5448018383e-01, 5.3089416974e-03,
    -2.6617531025e-05, -7.4914462461e-01, 5.3621769153e-03,  -2.6863391882e-05, -7.4375558430e-01,
    5.4159038815e-03,  -2.7107900169e-05, -7.3831257252e-01, 5.4701198919e-03,  -2.7350838780e-05,
    -7.3281510179e-01, 5.5248218085e-03,  -2.7591981278e-05, -7.2726268800e-01, 5.5800060402e-03,
    -2.7831091700e-05, -7.2165485086e-01, 5.6356685241e-03,  -2.8067924375e-05, -7.1599111442e-01,
    5.6918047059e-03,  -2.8302223753e-05, -7.1027100749e-01, 5.7484095202e-03,  -2.8533724244e-05,
    -7.0449406424e-01, 5.8054773707e-03,  -2.8762150071e-05, -6.9865982472e-01, 5.8630021092e-03,
    -2.8987215133e-05, -6.9276783540e-01, 5.9209770156e-03,  -2.9208622897e-05, -6.8681764976e-01,
    5.9793947765e-03,  -2.9426066292e-05, -6.8080882892e-01, 6.0382474646e-03,  -2.9639227637e-05,
    -6.7474094222e-01, 6.0975265172e-03,  -2.9847778580e-05, -6.6861356793e-01, 6.1572227146e-03,
    -3.0051380067e-05, -6.6242629383e-01, 6.2173261594e-03,  -3.0249682339e-05, -6.5617871799e-01,
    6.2778262545e-03,  -3.0442324950e-05, -6.4987044941e-01, 6.3387116818e-03,  -3.0628936818e-05,
    -6.4350110879e-01, 6.3999703813e-03,  -3.0809136313e-05, -6.3707032928e-01, 6.4615895294e-03,
    -3.0982531374e-05, -6.3057775721e-01, 6.5235555185e-03,  -3.1148719667e-05, -6.2402305298e-01,
    6.5858539364e-03,  -3.1307288778e-05, -6.1740589175e-01, 6.6484695459e-03,  -3.1457816454e-05,
    -6.1072596439e-01, 6.7113862653e-03,  -3.1599870884e-05, -6.0398297825e-01, 6.7745871493e-03,
    -3.1733011025e-05, -5.9717665809e-01, 6.8380543703e-03,  -3.1856786985e-05, -5.9030674694e-01,
    6.9017692011e-03,  -3.1970740453e-05, -5.8337300699e-01, 6.9657119975e-03,  -3.2074405174e-05,
    -5.7637522059e-01, 7.0298621830e-03,  -3.2167307500e-05, -5.6931319110e-01, 7.0941982337e-03,
    -3.2248966979e-05, -5.6218674390e-01, 7.1586976644e-03,  -3.2318897018e-05, -5.5499572734e-01,
    7.2233370171e-03,  -3.2376605600e-05, -5.4774001372e-01, 7.2880918492e-03,  -3.2421596071e-05,
    -5.4041950027e-01, 7.3529367251e-03,  -3.2453367984e-05, -5.3303411018e-01, 7.4178452079e-03,
    -3.2471418024e-05, -5.2558379355e-01, 7.4827898539e-03,  -3.2475240979e-05, -5.1806852846e-01,
    7.5477422091e-03,  -3.2464330805e-05, -5.1048832192e-01, 7.6126728072e-03,  -3.2438181736e-05,
    -5.0284321093e-01, 7.6775511700e-03,  -3.2396289481e-05, -4.9513326347e-01, 7.7423458107e-03,
    -3.2338152478e-05, -4.8735857951e-01, 7.8070242394e-03,  -3.2263273223e-05, -4.7951929199e-01,
    7.8715529706e-03,  -3.2171159662e-05, -4.7161556786e-01, 7.9358975349e-03,  -3.2061326649e-05,
    -4.6364760900e-01, 8.0000224921e-03,  -3.1933297467e-05, -4.5561565321e-01, 8.0638914486e-03,
    -3.1786605413e-05, -4.4751997516e-01, 8.1274670771e-03,  -3.1620795430e-05, -4.3936088728e-01,
    8.1907111400e-03,  -3.1435425807e-05, -4.3113874072e-01, 8.2535845159e-03,  -3.1230069915e-05,
    -4.2285392613e-01, 8.3160472302e-03,  -3.1004317993e-05, -4.1450687458e-01, 8.3780584882e-03,
    -3.0757778974e-05, -4.0609805832e-01, 8.4395767132e-03,  -3.0490082336e-05, -3.9762799152e-01,
    8.5005595869e-03,  -3.0200879987e-05, -3.8909723106e-01, 8.5609640948e-03,  -2.9889848158e-05,
    -3.8050637711e-01, 8.6207465745e-03,  -2.9556689316e-05, -3.7185607385e-01, 8.6798627683e-03,
    -2.9201134068e-05, -3.6314700995e-01, 8.7382678797e-03,  -2.8822943061e-05, -3.5437991912e-01,
    8.7959166329e-03,  -2.8421908861e-05, -3.4555558058e-01, 8.8527633372e-03,  -2.7997857807e-05,
    -3.3667481939e-01, 8.9087619544e-03,  -2.7550651822e-05, -3.2773850678e-01, 8.9638661697e-03,
    -2.7080190169e-05, -3.1874756042e-01, 9.0180294670e-03,  -2.6586411152e-05, -3.0970294454e-01,
    9.0712052063e-03,  -2.6069293737e-05, -3.0060567004e-01, 9.1233467054e-03,  -2.5528859087e-05,
    -2.9145679448e-01, 9.1744073244e-03,  -2.4965171997e-05, -2.8225742198e-01, 9.2243405526e-03,
    -2.4378342222e-05, -2.7300870309e-01, 9.2731000988e-03,  -2.3768525674e-05, -2.6371183446e-01,
    9.3206399835e-03,  -2.3135925495e-05, -2.5436805855e-01, 9.3669146334e-03,  -2.2480792972e-05,
    -2.4497866313e-01, 9.4118789777e-03,  -2.1803428299e-05, -2.3554498072e-01, 9.4554885458e-03,
    -2.1104181176e-05, -2.2606838799e-01, 9.4976995666e-03,  -2.0383451219e-05, -2.1655030498e-01,
    9.5384690681e-03,  -1.9641688193e-05, -2.0699219422e-01, 9.5777549779e-03,  -1.8879392043e-05,
    -1.9739555985e-01, 9.6155162236e-03,  -1.8097112726e-05, -1.8776194651e-01, 9.6517128326e-03,
    -1.7295449835e-05, -1.7809293823e-01, 9.6863060317e-03,  -1.6475052005e-05, -1.6839015715e-01,
    9.7192583450e-03,  -1.5636616110e-05, -1.5865526219e-01, 9.7505336907e-03,  -1.4780886235e-05,
    -1.4888994761e-01, 9.7800974750e-03,  -1.3908652431e-05, -1.3909594148e-01, 9.8079166847e-03,
    -1.3020749253e-05, -1.2927500405e-01, 9.8339599757e-03,  -1.2118054083e-05, -1.1942892602e-01,
    9.8581977592e-03,  -1.1201485235e-05, -1.0955952677e-01, 9.8806022829e-03,  -1.0271999866e-05,
    -9.9668652491e-02, 9.9011477095e-03,  -9.3305916780e-06, -8.9758174190e-02, 9.9198101893e-03,
    -8.3782884363e-06, -7.9829985712e-02, 9.9365679283e-03,  -7.4161493078e-06, -6.9886001635e-02,
    9.9514012514e-03,  -6.4452620331e-06, -5.9928155121e-02, 9.9642926593e-03,  -5.4667399442e-06,
    -4.9958395722e-02, 9.9752268798e-03,  -4.4817188447e-06, -3.9978687123e-02, 9.9841909126e-03,
    -3.4913537671e-06, -2.9991004857e-02, 9.9911740681e-03,  -2.4968156238e-06, -1.9997333973e-02,
    9.9961679987e-03,  -1.4992877708e-06, -9.9996666867e-03, 9.9991667242e-03,  -4.9996250281e-07,
    0.0000000000e+00,  1.0000166649e-02,  4.9996250281e-07,  9.9996666867e-03,  9.9991665743e-03,
    1.4992877708e-06,  1.9997333973e-02,  9.9961676994e-03,  2.4968156238e-06,  2.9991004857e-02,
    9.9911736202e-03,  3.4913537671e-06,  3.9978687123e-02,  9.9841903175e-03,  4.4817188447e-06,
    4.9958395722e-02,  9.9752261392e-03,  5.4667399442e-06,  5.9928155121e-02,  9.9642917755e-03,
    6.4452620331e-06,  6.9886001635e-02,  9.9514002269e-03,  7.4161493078e-06,  7.9829985712e-02,
    9.9365667661e-03,  8.3782884363e-06,  8.9758174190e-02,  9.9198088929e-03,  9.3305916780e-06,
    9.9668652491e-02,  9.9011462826e-03,  1.0271999866e-05,  1.0955952677e-01,  9.8806007296e-03,
    1.1201485235e-05,  1.1942892602e-01,  9.8581960839e-03,  1.2118054083e-05,  1.2927500405e-01,
    9.8339581832e-03,  1.3020749253e-05,  1.3909594148e-01,  9.8079147799e-03,  1.3908652431e-05,
    1.4888994761e-01,  9.7800954631e-03,  1.4780886235e-05,  1.5865526219e-01,  9.7505315772e-03,
    1.5636616110e-05,  1.6839015715e-01,  9.7192561357e-03,  1.6475052005e-05,  1.7809293823e-01,
    9.6863037322e-03,  1.7295449835e-05,  1.8776194651e-01,  9.6517104490e-03,  1.8097112726e-05,
    1.9739555985e-01,  9.6155137620e-03,  1.8879392043e-05,  2.0699219422e-01,  9.5777524445e-03,
    1.9641688193e-05,  2.1655030498e-01,  9.5384664690e-03,  2.0383451219e-05,  2.2606838799e-01,
    9.4976969082e-03,  2.1104181176e-05,  2.3554498072e-01,  9.4554858343e-03,  2.1803428299e-05,
    2.4497866313e-01,  9.4118762194e-03,  2.2480792972e-05,  2.5436805855e-01,  9.3669118345e-03,
    2.3135925495e-05,  2.6371183446e-01,  9.3206371501e-03,  2.3768525674e-05,  2.7300870309e-01,
    9.2730972370e-03,  2.4378342222e-05,  2.8225742198e-01,  9.2243376684e-03,  2.4965171997e-05,
    2.9145679448e-01,  9.1744044236e-03,  2.5528859087e-05,  3.0060567004e-01,  9.1233437938e-03,
    2.6069293737e-05,  3.0970294454e-01,  9.0712022893e-03,  2.6586411152e-05,  3.1874756042e-01,
    9.0180265501e-03,  2.7080190169e-05,  3.2773850678e-01,  8.9638632580e-03,  2.7550651822e-05,
    3.3667481939e-01,  8.9087590528e-03,  2.7997857807e-05,  3.4555558058e-01,  8.8527604506e-03,
    2.8421908861e-05,  3.5437991912e-01,  8.7959137658e-03,  2.8822943061e-05,  3.6314700995e-01,
    8.7382650365e-03,  2.9201134068e-05,  3.7185607385e-01,  8.6798599531e-03,  2.9556689316e-05,
    3.8050637711e-01,  8.6207437911e-03,  2.9889848158e-05,  3.8909723106e-01,  8.5609613468e-03,
    3.0200879987e-05,  3.9762799152e-01,  8.5005568778e-03,  3.0490082336e-05,  4.0609805832e-01,
    8.4395740461e-03,  3.0757778974e-05,  4.1450687458e-01,  8.3780558661e-03,  3.1004317993e-05,
    4.2285392613e-01,  8.3160446558e-03,  3.1230069915e-05,  4.3113874072e-01,  8.2535819916e-03,
    3.1435425807e-05,  4.3936088728e-01,  8.1907086680e-03,  3.1620795430e-05,  4.4751997516e-01,
    8.1274646595e-03,  3.1786605413e-05,  4.5561565321e-01,  8.0638890870e-03,  3.1933297467e-05,
    4.6364760900e-01,  8.0000201882e-03,  3.2061326649e-05,  4.7161556786e-01,  7.9358952899e-03,
    3.2171159662e-05,  4.7951929199e-01,  7.8715507858e-03,  3.2263273223e-05,  4.8735857951e-01,
    7.8070221157e-03,  3.2338152478e-05,  4.9513326347e-01,  7.7423437489e-03,  3.2396289481e-05,
    5.0284321093e-01,  7.6775491707e-03,  3.2438181736e-05,  5.1048832192e-01,  7.6126708707e-03,
    3.2464330805e-05,  5.1806852846e-01,  7.5477403359e-03,  3.2475240979e-05,  5.2558379355e-01,
    7.4827880439e-03,  3.2471418024e-05,  5.3303411018e-01,  7.4178434611e-03,  3.2453367984e-05,
    5.4041950027e-01,  7.3529350414e-03,  3.2421596071e-05,  5.4774001372e-01,  7.2880902283e-03,
    3.2376605600e-05,  5.5499572734e-01,  7.2233354585e-03,  3.2318897018e-05,  5.6218674390e-01,
    7.1586961676e-03,  3.2248966979e-05,  5.6931319110e-01,  7.0941967980e-03,  3.2167307500e-05,
    5.7637522059e-01,  7.0298608078e-03,  3.2074405174e-05,  5.8337300699e-01,  6.9657106820e-03,
    3.1970740453e-05,  5.9030674694e-01,  6.9017679443e-03,  3.1856786985e-05,  5.9717665809e-01,
    6.8380531713e-03,  3.1733011025e-05,  6.0398297825e-01,  6.7745860071e-03,  3.1599870884e-05,
    6.1072596439e-01,  6.7113851788e-03,  3.1457816454e-05,  6.1740589175e-01,  6.6484685140e-03,
    3.1307288778e-05,  6.2402305298e-01,  6.5858529578e-03,  3.1148719667e-05,  6.3057775721e-01,
    6.5235545921e-03,  3.0982531374e-05,  6.3707032928e-01,  6.4615886539e-03,  3.0809136313e-05,
    6.4350110879e-01,  6.3999695555e-03,  3.0628936818e-05,  6.4987044941e-01,  6.3387109044e-03,
    3.0442324950e-05,  6.5617871799e-01,  6.2778255241e-03,  3.0249682339e-05,  6.6242629383e-01,
    6.2173254747e-03,  3.0051380067e-05,  6.6861356793e-01,  6.1572220743e-03,  2.9847778580e-05,
    6.7474094222e-01,  6.0975259199e-03,  2.9639227637e-05,  6.8080882892e-01,  6.0382469091e-03,
    2.9426066292e-05,  6.8681764976e-01,  5.9793942614e-03,  2.9208622897e-05,  6.9276783540e-01,
    5.9209765395e-03,  2.8987215133e-05,  6.9865982472e-01,  5.8630016708e-03,  2.8762150071e-05,
    7.0449406424e-01,  5.8054769687e-03,  2.8533724244e-05,  7.1027100749e-01,  5.7484091534e-03,
    2.8302223753e-05,  7.1599111442e-01,  5.6918043728e-03,  2.8067924375e-05,  7.2165485086e-01,
    5.6356682236e-03,  2.7831091700e-05,  7.2726268800e-01,  5.5800057711e-03,  2.7591981278e-05,
    7.3281510179e-01,  5.5248215695e-03,  2.7350838780e-05,  7.3831257252e-01,  5.4701196818e-03,
    2.7107900169e-05,  7.4375558430e-01,  5.4159036990e-03,  2.6863391882e-05,  7.4914462461e-01,
    5.3621767594e-03,  2.6617531025e-05,  7.5448018383e-01,  5.3089415669e-03,  2.6370525570e-05,
    7.5976275488e-01,  5.2562004097e-03,  2.6122574559e-05,  7.6499283271e-01,  5.2039551777e-03,
    2.5873868317e-05,  7.7017091402e-01,  5.1522073805e-03,  2.5624588671e-05,  7.7529749681e-01,
    5.1009581637e-03,  2.5374909161e-05,  7.8037308007e-01,  5.0502083261e-03,  2.5124995272e-05,
    7.8539816340e-01,  4.9999583355e-03,  2.4875004648e-05};
constexpr float kAtanTableFloat[kApproxTableSize] = {
    -7.8539816340e-01, 4.9999583355e-03,  -2.5124995272e-05, -7.8037308007e-01, 5.0502083453e-03,
    -2.5374909161e-05, -7.7529749681e-01, 5.1009582031e-03,  -2.5624588671e-05, -7.7017091402e-01,
    5.1522074411e-03,  -2.5873868317e-05, -7.6499283271e-01, 5.2039552606e-03,  -2.6122574559e-05,
    -7.5976275488e-01, 5.2562005158e-03,  -2.6370525570e-05, -7.5448018383e-01, 5.3089416974e-03,
    -2.6617531025e-05, -7.4914462461e-01, 5.3621769153e-03,  -2.6863391882e-05, -7.4375558430e-01,
    5.4159038815e-03,  -2.7107900169e-05, -7.3831257252e-01, 5.4701198919e-03,  -2.7350838780e-05,
    -7.3281510179e-01, 5.5248218085e-03,  -2.7591981278e-05, -7.2726268800e-01, 5.5800060402e-03,
    -2.7831091700e-05, -7.2165485086e-01, 5.6356685241e-03,  -2.8067924375e-05, -7.1599111442e-01,
    5.6918047059e-03,  -2.8302223753e-05, -7.1027100749e-01, 5.7484095202e-03,  -2.8533724244e-05,
    -7.0449406424e-01, 5.8054773707e-03,  -2.8762150071e-05, -6.9865982472e-01, 5.8630021092e-03,
    -2.8987215133e-05, -6.9276783540e-01, 5.9209770156e-03,  -2.9208622897e-05, -6.8681764976e-01,
    5.9793947765e-03,  -2.9426066292e-05, -6.8080882892e-01, 6.0382474646e-03,  -2.9639227637e-05,
    -6.7474094222e-01, 6.0975265172e-03,  -2.9847778580e-05, -6.6861356793e-01, 6.1572227146e-03,
    -3.0051380067e-05, -6.6242629383e-01, 6.2173261594e-03,  -3.0249682339e-05, -6.5617871799e-01,
    6.2778262545e-03,  -3.0442324950e-05, -6.4987044941e-01, 6.3387116818e-03,  -3.0628936818e-05,
    -6.4350110879e-01, 6.3999703813e-03,  -3.0809136313e-05, -6.3707032928e-01, 6.4615895294e-03,
    -3.0982531374e-05, -6.3057775721e-01, 6.5235555185e-03,  -3.1148719667e-05, -6.2402305298e-01,
    6.5858539364e-03,  -3.1307288778e-05, -6.1740589175e-01, 6.6484695459e-03,  -3.1457816454e-05,
    -6.1072596439e-01, 6.7113862653e-03,  -3.1599870884e-05, -6.0398297825e-01, 6.7745871493e-03,
    -3.1733011025e-05, -5.9717665809e-01, 6.8380543703e-03,  -3.1856786985e-05, -5.9030674694e-01,
    6.9017692011e-03,  -3.1970740453e-05, -5.8337300699e-01, 6.9657119975e-03,  -3.2074405174e-05,
    -5.7637522059e-01, 7.0298621830e-03,  -3.2167307500e-05, -5.6931319110e-01, 7.0941982337e-03,
    -3.2248966979e-05, -5.6218674390e-01, 7.1586976644e-03,  -3.2318897018e-05, -5.5499572734e-01,
    7.2233370171e-03,  -3.2376605600e-05, -5.4774001372e-01, 7.2880918492e-03,  -3.2421596071e-05,
    -5.4041950027e-01, 7.3529367251e-03,  -3.2453367984e-05, -5.3303411018e-01, 7.4178452079e-03,
    -3.2471418024e-05, -5.2558379355e-01, 7.4827898539e-03,  -3.2475240979e-05, -5.1806852846e-01,
    7.5477422091e-03,  -3.2464330805e-05, -5.1048832192e-01, 7.6126728072e-03,  -3.2438181736e-05,
    -5.0284321093e-01, 7.6775511700e-03,  -3.2396289481e-05, -4.9513326347e-01, 7.7423458107e-03,
    -3.2338152478e-05, -4.8735857951e-01, 7.8070242394e-03,  -3.2263273223e-05, -4.7951929199e-01,
    7.8715529706e-03,  -3.2171159662e-05, -4.7161556786e-01, 7.9358975349e-03,  -3.2061326649e-05,
    -4.6364760900e-01, 8.0000224921e-03,  -3.1933297467e-05, -4.5561565321e-01, 8.0638914486e-03,
    -3.1786605413e-05, -4.4751997516e-01, 8.1274670771e-03,  -3.1620795430e-05, -4.3936088728e-01,
    8.1907111400e-03,  -3.1435425807e-05, -4.3113874072e-01, 8.2535845159e-03,  -3.1230069915e-05,
    -4.2285392613e-01, 8.3160472302e-03,  -3.1004317993e-05, -4.1450687458e-01, 8.3780584882e-03,
    -3.0757778974e-05, -4.0609805832e-01, 8.4395767132e-03,  -3.0490082336e-05, -3.9762799152e-01,
    8.5005595869e-03,  -3.0200879987e-05, -3.8909723106e-01, 8.5609640948e-03,  -2.9889848158e-05,
    -3.8050637711e-01, 8.6207465745e-03,  -2.9556689316e-05, -3.7185607385e-01, 8.6798627683e-03,
    -2.9201134068e-05, -3.6314700995e-01, 8.7382678797e-03,  -2.8822943061e-05, -3.5437991912e-01,
    8.7959166329e-03,  -2.8421908861e-05, -3.4555558058e-01, 8.8527633372e-03,  -2.7997857807e-05,
    -3.3667481939e-01, 8.9087619544e-03,  -2.7550651822e-05, -3.2773850678e-01, 8.9638661697e-03,
    -2.7080190169e-05, -3.1874756042e-01, 9.0180294670e-03,  -2.6586411152e-05, -3.0970294454e-01,
    9.0712052063e-03,  -2.6069293737e-05, -3.0060567004e-01, 9.1233467054e-03,  -2.5528859087e-05,
    -2.9145679448e-01, 9.1744073244e-03,  -2.4965171997e-05, -2.8225742198e-01, 9.2243405526e-03,
    -2.4378342222e-05, -2.7300870309e-01, 9.2731000988e-03,  -2.3768525674e-05, -2.6371183446e-01,
    9.3206399835e-03,  -2.3135925495e-05, -2.5436805855e-01, 9.3669146334e-03,  -2.2480792972e-05,
    -2.4497866313e-01, 9.4118789777e-03,  -2.1803428299e-05, -2.3554498072e-01, 9.4554885458e-03,
    -2.1104181176e-05, -2.2606838799e-01, 9.4976995666e-03,  -2.0383451219e-05, -2.1655030498e-01,
    9.5384690681e-03,  -1.9641688193e-05, -2.0699219422e-01, 9.5777549779e-03,  -1.8879392043e-05,
    -1.9739555985e-01, 9.6155162236e-03,  -1.8097112726e-05, -1.8776194651e-01, 9.6517128326e-03,
    -1.7295449835e-05, -1.7809293823e-01, 9.6863060317e-03,  -1.6475052005e-05, -1.6839015715e-01,
    9.7192583450e-03,  -1.5636616110e-05, -1.5865526219e-01, 9.7505336907e-03,  -1.4780886235e-05,
    -1.4888994761e-01, 9.7800974750e-03,  -1.3908652431e-05, -1.3909594148e-01, 9.8079166847e-03,
    -1.3020749253e-05, -1.2927500405e-01, 9.8339599757e-03,  -1.2118054083e-05, -1.1942892602e-01,
    9.8581977592e-03,  -1.1201485235e-05, -1.0955952677e-01, 9.8806022829e-03,  -1.0271999866e-05,
    -9.9668652491e-02, 9.9011477095e-03,  -9.3305916780e-06, -8.9758174190e-02, 9.9198101893e-03,
    -8.3782884363e-06, -7.9829985712e-02, 9.9365679283e-03,  -7.4161493078e-06, -6.9886001635e-02,
    9.9514012514e-03,  -6.4452620331e-06, -5.9928155121e-02, 9.9642926593e-03,  -5.4667399442e-06,
    -4.9958395722e-02, 9.9752268798e-03,  -4.4817188447e-06, -3.9978687123e-02, 9.9841909126e-03,
    -3.4913537671e-06, -2.9991004857e-02, 9.9911740681e-03,  -2.4968156238e-06, -1.9997333973e-02,
    9.9961679987e-03,  -1.4992877708e-06, -9.9996666867e-03, 9.9991667242e-03,  -4.9996250281e-07,
    0.0000000000e+00,  1.0000166649e-02,  4.9996250281e-07,  9.9996666867e-03,  9.9991665743e-03,
    1.4992877708e-06,  1.9997333973e-02,  9.9961676994e-03,  2.4968156238e-06,  2.9991004857e-02,
    9.9911736202e-03,  3.4913537671e-06,  3.9978687123e-02,  9.9841903175e-03,  4.4817188447e-06,
    4.9958395722e-02,  9.9752261392e-03,  5.4667399442e-06,  5.9928155121e-02,  9.9642917755e-03,
    6.4452620331e-06,  6.9886001635e-02,  9.9514002269e-03,  7.4161493078e-06,  7.9829985712e-02,
    9.9365667661e-03,  8.3782884363e-06,  8.9758174190e-02,  9.9198088929e-03,  9.3305916780e-06,
    9.9668652491e-02,  9.9011462826e-03,  1.0271999866e-05,  1.0955952677e-01,  9.8806007296e-03,
    1.1201485235e-05,  1.1942892602e-01,  9.8581960839e-03,  1.2118054083e-05,  1.2927500405e-01,
    9.8339581832e-03,  1.3020749253e-05,  1.3909594148e-01,  9.8079147799e-03,  1.3908652431e-05,
    1.4888994761e-01,  9.7800954631e-03,  1.4780886235e-05,  1.5865526219e-01,  9.7505315772e-03,
    1.5636616110e-05,  1.6839015715e-01,  9.7192561357e-03,  1.6475052005e-05,  1.7809293823e-01,
    9.6863037322e-03,  1.7295449835e-05,  1.8776194651e-01,  9.6517104490e-03,  1.8097112726e-05,
    1.9739555985e-01,  9.6155137620e-03,  1.8879392043e-05,  2.0699219422e-01,  9.5777524445e-03,
    1.9641688193e-05,  2.1655030498e-01,  9.5384664690e-03,  2.0383451219e-05,  2.2606838799e-01,
    9.4976969082e-03,  2.1104181176e-05,  2.3554498072e-01,  9.4554858343e-03,  2.1803428299e-05,
    2.4497866313e-01,  9.4118762194e-03,  2.2480792972e-05,  2.5436805855e-01,  9.3669118345e-03,
    2.3135925495e-05,  2.6371183446e-01,  9.3206371501e-03,  2.3768525674e-05,  2.7300870309e-01,
    9.2730972370e-03,  2.4378342222e-05,  2.8225742198e-01,  9.2243376684e-03,  2.4965171997e-05,
    2.9145679448e-01,  9.1744044236e-03,  2.5528859087e-05,  3.0060567004e-01,  9.1233437938e-03,
    2.6069293737e-05,  3.0970294454e-01,  9.0712022893e-03,  2.6586411152e-05,  3.1874756042e-01,
    9.0180265501e-03,  2.7080190169e-05,  3.2773850678e-01,  8.9638632580e-03,  2.7550651822e-05,
    3.3667481939e-01,  8.9087590528e-03,  2.7997857807e-05,  3.4555558058e-01,  8.8527604506e-03,
    2.8421908861e-05,  3.5437991912e-01,  8.7959137658e-03,  2.8822943061e-05,  3.6314700995e-01,
    8.7382650365e-03,  2.9201134068e-05,  3.7185607385e-01,  8.6798599531e-03,  2.9556689316e-05,
    3.8050637711e-01,  8.6207437911e-03,  2.9889848158e-05,  3.8909723106e-01,  8.5609613468e-03,
    3.0200879987e-05,  3.9762799152e-01,  8.5005568778e-03,  3.0490082336e-05,  4.0609805832e-01,
    8.4395740461e-03,  3.0757778974e-05,  4.1450687458e-01,  8.3780558661e-03,  3.1004317993e-05,
    4.2285392613e-01,  8.3160446558e-03,  3.1230069915e-05,  4.3113874072e-01,  8.2535819916e-03,
    3.1435425807e-05,  4.3936088728e-01,  8.1907086680e-03,  3.1620795430e-05,  4.4751997516e-01,
    8.1274646595e-03,  3.1786605413e-05,  4.5561565321e-01,  8.0638890870e-03,  3.1933297467e-05,
    4.6364760900e-01,  8.0000201882e-03,  3.2061326649e-05,  4.7161556786e-01,  7.9358952899e-03,
    3.2171159662e-05,  4.7951929199e-01,  7.8715507858e-03,  3.2263273223e-05,  4.8735857951e-01,
    7.8070221157e-03,  3.2338152478e-05,  4.9513326347e-01,  7.7423437489e-03,  3.2396289481e-05,
    5.0284321093e-01,  7.6775491707e-03,  3.2438181736e-05,  5.1048832192e-01,  7.6126708707e-03,
    3.2464330805e-05,  5.1806852846e-01,  7.5477403359e-03,  3.2475240979e-05,  5.2558379355e-01,
    7.4827880439e-03,  3.2471418024e-05,  5.3303411018e-01,  7.4178434611e-03,  3.2453367984e-05,
    5.4041950027e-01,  7.3529350414e-03,  3.2421596071e-05,  5.4774001372e-01,  7.2880902283e-03,
    3.2376605600e-05,  5.5499572734e-01,  7.2233354585e-03,  3.2318897018e-05,  5.6218674390e-01,
    7.1586961676e-03,  3.2248966979e-05,  5.6931319110e-01,  7.0941967980e-03,  3.2167307500e-05,
    5.7637522059e-01,  7.0298608078e-03,  3.2074405174e-05,  5.8337300699e-01,  6.9657106820e-03,
    3.1970740453e-05,  5.9030674694e-01,  6.9017679443e-03,  3.1856786985e-05,  5.9717665809e-01,
    6.8380531713e-03,  3.1733011025e-05,  6.0398297825e-01,  6.7745860071e-03,  3.1599870884e-05,
    6.1072596439e-01,  6.7113851788e-03,  3.1457816454e-05,  6.1740589175e-01,  6.6484685140e-03,
    3.1307288778e-05,  6.2402305298e-01,  6.5858529578e-03,  3.1148719667e-05,  6.3057775721e-01,
    6.5235545921e-03,  3.0982531374e-05,  6.3707032928e-01,  6.4615886539e-03,  3.0809136313e-05,
    6.4350110879e-01,  6.3999695555e-03,  3.0628936818e-05,  6.4987044941e-01,  6.3387109044e-03,
    3.0442324950e-05,  6.5617871799e-01,  6.2778255241e-03,  3.0249682339e-05,  6.6242629383e-01,
    6.2173254747e-03,  3.0051380067e-05,  6.6861356793e-01,  6.1572220743e-03,  2.9847778580e-05,
    6.7474094222e-01,  6.0975259199e-03,  2.9639227637e-05,  6.8080882892e-01,  6.0382469091e-03,
    2.9426066292e-05,  6.8681764976e-01,  5.9793942614e-03,  2.9208622897e-05,  6.9276783540e-01,
    5.9209765395e-03,  2.8987215133e-05,  6.9865982472e-01,  5.8630016708e-03,  2.8762150071e-05,
    7.0449406424e-01,  5.8054769687e-03,  2.8533724244e-05,  7.1027100749e-01,  5.7484091534e-03,
    2.8302223753e-05,  7.1599111442e-01,  5.6918043728e-03,  2.8067924375e-05,  7.2165485086e-01,
    5.6356682236e-03,  2.7831091700e-05,  7.2726268800e-01,  5.5800057711e-03,  2.7591981278e-05,
    7.3281510179e-01,  5.5248215695e-03,  2.7350838780e-05,  7.3831257252e-01,  5.4701196818e-03,
    2.7107900169e-05,  7.4375558430e-01,  5.4159036990e-03,  2.6863391882e-05,  7.4914462461e-01,
    5.3621767594e-03,  2.6617531025e-05,  7.5448018383e-01,  5.3089415669e-03,  2.6370525570e-05,
    7.5976275488e-01,  5.2562004097e-03,  2.6122574559e-05,  7.6499283271e-01,  5.2039551777e-03,
    2.5873868317e-05,  7.7017091402e-01,  5.1522073805e-03,  2.5624588671e-05,  7.7529749681e-01,
    5.1009581637e-03,  2.5374909161e-05,  7.8037308007e-01,  5.0502083261e-03,  2.5124995272e-05,
    7.8539816340e-01,  4.9999583355e-03,  2.4875004648e-05};

template <typename T>
T LookUpAtanTable(T z) {
  z = (z + 1.0) * kApproxIntervals;
  const int x = static_cast<int>(z);
  T y = z - x;
  return kAtanTable[3 * x] + (kAtanTable[3 * x + 1] - kAtanTable[3 * x + 2] * y) * y;
}

template <>
float LookUpAtanTable(float z);

}  // namespace internal

template <typename T>
struct Vec2;

template <typename T>
struct Vec3;

template <typename T>
T Sqr(T x) {
  return x * x;
}

template <typename T>
T Cube(T x) {
  return x * x * x;
}

template <typename T>
T Clamp(T value, T min_value, T max_value) {
  return std::max(min_value, std::min(max_value, value));
}

template <typename T>
T Sech(T x) {
  return static_cast<T>(2.0 / (std::exp(x) + std::exp(-x)));
}

// sinc of x radians
template <typename T>
T Sinc(T x) {
  if (std::abs(x) < kEpsilon) {
    return static_cast<T>(1);
  }
  return std::sin(x) / x;
}

// Approximation of atan(x).
// If the type of x is double, the precision error will not be greater than 2e-8.
// If the type of x is float, the precision error will not be greater than 3e-7.
template <typename T>
T ApproximateAtan(T z) {
  static_assert(std::is_floating_point<T>::value, "template argument not a floating point type");
  if (std::abs(z) <= 1.0) {
    return internal::LookUpAtanTable(z);
  } else {
    return (z < 0.0 ? -M_PI_2 : M_PI_2) - internal::LookUpAtanTable(1.0 / z);
  }
}

template <>
inline float ApproximateAtan(float z) {
  if (std::abs(z) <= 1.0) {
    return internal::LookUpAtanTable(z);
  } else {
    return (z < 0.0 ? -M_PI_2_f : M_PI_2_f) - internal::LookUpAtanTable(1.0f / z);
  }
}

// Approximation of atan2(y, x).
// T should be a floating point type.
template <typename T>
T ApproximateAtan2(T y, T x) {
  static constexpr T kEpsilon = 1e-9;
  if (std::abs(y) <= kEpsilon) {
    return x < 0.0 ? (y < 0.0 ? -M_PI : M_PI) : 0;
  } else if (std::abs(x) <= std::abs(y)) {
    return internal::LookUpAtanTable(-x / y) + (y < 0.0 ? -M_PI_2 : M_PI_2);
  } else {
    return -internal::LookUpAtanTable(-y / x) +
           (y < 0.0 ? (x < 0.0 ? -M_PI : 0) : (x > 0.0 ? 0 : M_PI));
  }
}

template <>
inline float ApproximateAtan2(float y, float x) {
  static constexpr float kEpsilon = 1e-9f;
  if (std::abs(y) <= kEpsilon) {
    return x < 0.0f ? (y < 0.0f ? -M_PI_f : M_PI_f) : 0;
  } else if (std::abs(x) <= std::abs(y)) {
    return internal::LookUpAtanTable(-x / y) + (y < 0.0f ? -M_PI_2_f : M_PI_2_f);
  } else {
    return -internal::LookUpAtanTable(-y / x) +
           (y < 0.0f ? (x < 0.0f ? -M_PI_f : 0) : (x > 0.0f ? 0 : M_PI_f));
  }
}

template <typename T>
T Sigmoid(T x) {
  return static_cast<T>(1.0 / (1.0 + std::exp(-x)));
}

template <typename T>
T NormalPdf(T x, T sigma) {
  return std::exp(-0.5 * Sqr(x / sigma)) / (std::sqrt(2 * M_PI) * sigma);
}

template <typename T>
T NormalCdf(T mu, T sigma, T x) {
  return 0.5 * (1 + std::erf((x - mu) / (sigma * std::sqrt(2))));
}

inline int fsign(double v) { return (-math::kEpsilon < v) - (v < math::kEpsilon); }

// Returns an angle between -pi (inclusive) and pi (exclusive).
double NormalizeAngle(double angle);

// Interpolate a heading between heading_prev and heading_next, which is factor from heading_prev
// and 1 - factor from heading_next.
double InterpolateAngle(double heading_prev, double heading_next, double factor);

// Calculate the curvature on a trajectory at point current.
// The behavior is undefined if angle(prev, current, next) >= pi/2
double Curvature(const Vec2<double>& prev, const Vec2<double>& current, const Vec2<double>& next);

// Square of the curvature.
// The behavior is undefined if angle(prev, current, next) >= pi/2
double CurvatureSqr(const Vec2<double>& prev, const Vec2<double>& current,
                    const Vec2<double>& next);

// Signed curvature. Positive: left turn. Negative: right turn.
// The behavior is undefined if angle(prev, current, next) >= pi/2
double CurvatureSigned(const Vec2<double>& prev, const Vec2<double>& current,
                       const Vec2<double>& next);

double L1Norm(const std::vector<double>& v);
double L2Norm(const std::vector<double>& v);
double LInfinityNorm(const std::vector<double>& v);

template <typename T, typename S = T>
S Sum(const std::vector<T>& v) {
  return std::accumulate(v.begin(), v.end(), S{0});
}

template <typename T, typename S = T>
S Average(const std::vector<T>& v) {
  CHECK(!v.empty());
  return Sum<T, S>(v) / v.size();
}

template <class NumType>
inline bool IsNear(NumType expected, NumType actual, NumType epsilon) {
  return std::abs(actual - expected) < epsilon;
}

double StandardDeviation(const std::vector<double>& v, double average);
inline double StandardDeviation(const std::vector<double>& v) {
  return StandardDeviation(v, Average(v));
}

// If you want to compute min and p25 of data points in `v`, call `PercentilesInPlace(&v, {0, 25})`.
// Returned vector should contain 2 elements in this case, first element `min(v)` and second p25 of
// `v`.
// This is similar to `Percentiles()` except that the first argument containing all data points is
// taken by non-const pointer. This avoids the performance overhead of copying the whole list of
// data points, but may reorder caller's list of data points.
// parameters:
// v_ptr - pointer to a vector containing data points, it may be reordered by this function.
// percentages - sorted list of percentage numbers, each of them must be between 0 (inclusive)
//               and 100 (inclusive).
std::vector<double> PercentilesInPlace(std::vector<double>* v_ptr,
                                       const std::vector<int>& percentages);

// If you want to compute min and p25 of data points in `v`, call `Percentiles(&v, {0, 25})`.
// Returned vector should contain 2 elements in this case, first element `min(v)` and second p25 of
// `v`.
// This is similar to `PercentilesInPlace()` except that the first argument containing all data
// points is taken by value, implicitly making a copy of the whole list of data points. This incurs
// performance overhead if the number of data points is large, but it does not reorder caller's list
// of data points in any way.
// parameters:
// v - a vector containing data points.
// percentages - sorted list of percentage numbers, each of them must be between 0 (inclusive)
//               and 100 (inclusive).
inline std::vector<double> Percentiles(std::vector<double> v, const std::vector<int>& percentages) {
  return PercentilesInPlace(&v, percentages);
}

// Returns the minimum f(x). x will be updated.
double GradientDescent(std::vector<double>* x, std::function<double(const std::vector<double>&)> f,
                       std::function<std::vector<double>(const std::vector<double>&)> gradient,
                       double error = 1e-5);

// Conversions between radian and degree angle measurements.
// The results will NOT normalized into [0, 2pi] nor [0, 360].
constexpr double DegreeToRadian(double angle_in_degree) { return angle_in_degree / 180.0 * M_PI; }

constexpr double RadianToDegree(double angle_in_radian) { return angle_in_radian / M_PI * 180.0; }

// Linear Interpolation between start and end.
inline double Lerp(double start, double end, double ratio) {
  return start * (1.0 - ratio) + end * ratio;
}

// Returns the count of trailing zero in the binary representation of a number.
inline int CountTrailingZeros(uint64_t n) {
#if __GNUC__ || __clang__
  return __builtin_ctzll(n);
#else
  return internal::Log2ByTableLookup(n & (-n));
#endif
}

// Returns the count of leading zero in the binary representation of a number.
inline int CountLeadingZeros(uint32_t n) {
#if __GNUC__ || __clang__
  return __builtin_clz(n);
#else
  int num_leading_zeros = 0;
  if (n <= 0x0000ffff) {
    num_leading_zeros += 16;
    n <<= 16;
  }
  if (n <= 0x00ffffff) {
    num_leading_zeros += 8;
    n <<= 8;
  }
  if (n <= 0x0fffffff) {
    num_leading_zeros += 4;
    n <<= 4;
  }
  if (n <= 0x3fffffff) {
    num_leading_zeros += 2;
    n <<= 2;
  }
  if (n <= 0x7fffffff) {
    num_leading_zeros++;
  }
  return num_leading_zeros;
#endif
}

// Returns the count of one(s) in the binary representation of a number.
inline int CountNumberOfOnes(uint64_t n) {
#if __GNUC__ || __clang__
  return __builtin_popcountll(n);
#else
  int count = 0;
  for (; n; n &= (n - 1)) {
    ++count;
  }
  return count;
#endif
}

// Return either floor(x) or floor(x)+1. The expected return value is x.
template <typename RealType, typename UniformRandomNumberGenerator>
int RandomRound(RealType x, UniformRandomNumberGenerator* urng) {
  static_assert(std::is_floating_point<RealType>::value,
                "template argument not a floating point type");
  std::uniform_real_distribution<RealType> dist;
  int i = std::floor(x);
  if (dist(*urng) < x - i) {
    return i + 1;
  } else {
    return i;
  }
}

}  // namespace math
